[[tool.pdm.source]]
name = "pypi"
url = "https://pypi.org/simple/"
verify_ssl = true

[tool.pdm]
includes = ["src"]
[tool.pdm.dev-dependencies]
dev = [
    "yapf>=0.32.0",
    "isort>=5.11.4",
    "ruff>=0.0.228",
    "mypy>=0.991",
    "pytest>=7.2.1",
    "pytest-cov>=4.0.0",
    "setuptools-git-versioning>=1.13.1",
]
[build-system]
requires = ["pdm-pep517"]
build-backend = "pdm.pep517.api"

[tool.setuptools-git-versioning]
enabled = true
template = "{tag}"
dev_template = "{tag}.post{ccount}+{sha}"
dirty_template = "{tag}.post{ccount}+{sha}.dirty"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--cov src --cov-report xml:coverage.xml --cov-report term-missing"
testpaths = [
  "tests",
]

[tool.coverage.paths]
source = [
  "src",
]

[tool.coverage.run]
branch = true
omit = []
source = [
  "src",
]

[tool.coverage.report]
show_missing = true
exclude_lines = [
  # Have to re-enable the standard pragma
  "pragma: no cover",
  # Don't complain about missing debug-only code:
  "def __repr__",
  "if self.debug",
  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",
  # Don't complain if non-runnable code isn't run:
  "if 0:",
  "if __name__ == .__main__.:",
  # ignore pass and ...
  "pass",
  # "...",
]

[tool.mypy]
files = [
  "src",
]
python_version = "3.11"
ignore_missing_imports = true

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 79
force_single_line = true

[project.scripts]
rcnn = "rcnn.cli:cli"

[project.optional-dependencies]
repl = [
    "jupyter>=1.0.0",
]
osx = [
    "tensorflow-macos>=2.11.0",
    "tensorflow-metal>=0.7.0",
]
x86 = [
    "tensorflow>=2.11.0",
]

[project]
name = "tf-rcnn"
version = "0"
description = "Implementation of Mask R-CNN with TensorFlow2"
authors = [
    {name = "ZHANG Meng", email = "stall-breezes.0t@icloud.com"},
]
dependencies = [
    "click>=8.1.3",
    "opencv-python>=4.7.0.68",
    "tensorflow-datasets>=4.9.2",
]
requires-python = ">=3.8,<3.12"
license = {text = "MIT"}
readme = "README.md"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Build Tools",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
]

[project.urls]
homepage = "https://github.com/ppmzhang2/tf-rcnn"

[tool.ruff]
# all but incompatible options: G, TID, TCH, PTH
select = [
    "E", "F", "B", "Q", "I", "C90", "N", "D", "UP", "YTT", "ANN", "S", "BLE",
    "FBT", "A", "COM", "C4", "DTZ", "T10", "EM", "EXE", "ISC", "ICN", "INP",
    "PIE", "T20", "PT", "Q", "RET", "SIM", "ARG", "ERA", "PD", "PGH", "PL",
    "TRY", "RUF",
]
ignore = [
    "S101",  # assert-used
    "INP001",  # implicit-namespace-package
    "ANN101",  # missing-type-self
    "ANN102",  # missing-type-cls
    "ANN204",  # missing-return-type-special-method
    "ERA001",  # commented-out-code
    "ANN002",  # missing-type-args
    "ANN003",  # missing-type-kwargs
    "RET504",  # unnecessary-assign
]
show-source = true
line-length = 79
src = ["src"]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Assume Python 3.11.
target-version = "py311"

[tool.ruff.pydocstyle]
# Use Google-style docstrings.
convention = "google"

[tool.ruff.isort]
force-single-line = true
